// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"net/http"

	"github.com/Pranc1ngPegasus/golang-lab/playwright/adapter/handler"
	"github.com/Pranc1ngPegasus/golang-lab/playwright/adapter/server"
	logger2 "github.com/Pranc1ngPegasus/golang-lab/playwright/domain/logger"
	tracer2 "github.com/Pranc1ngPegasus/golang-lab/playwright/domain/tracer"
	"github.com/Pranc1ngPegasus/golang-lab/playwright/infra/configuration"
	"github.com/Pranc1ngPegasus/golang-lab/playwright/infra/logger"
	"github.com/Pranc1ngPegasus/golang-lab/playwright/infra/tracer"
	"github.com/Pranc1ngPegasus/golang-lab/playwright/usecase"
)

// Injectors from wire.go:

func initialize() (*app, error) {
	contextContext := context.Background()
	configurationConfiguration, err := configuration.NewConfiguration()
	if err != nil {
		return nil, err
	}
	loggerLogger, err := logger.NewLogger(configurationConfiguration)
	if err != nil {
		return nil, err
	}
	tracerTracer, err := tracer.NewTracer(configurationConfiguration)
	if err != nil {
		return nil, err
	}
	playwright, err := usecase.NewPlaywright(tracerTracer)
	if err != nil {
		return nil, err
	}
	handlerHandler := handler.NewHandler(loggerLogger, playwright)
	httpServer := server.NewServer(contextContext, loggerLogger, configurationConfiguration, handlerHandler)
	mainApp := &app{
		ctx:    contextContext,
		logger: loggerLogger,
		tracer: tracerTracer,
		server: httpServer,
	}
	return mainApp, nil
}

// wire.go:

type app struct {
	ctx    context.Context
	logger logger2.Logger
	tracer tracer2.Tracer
	server *http.Server
}
