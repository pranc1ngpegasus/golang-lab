// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Pranc1ngPegasus/golang-lab/clean-architecture/adapter/configuration"
	"github.com/Pranc1ngPegasus/golang-lab/clean-architecture/adapter/handler"
	"github.com/Pranc1ngPegasus/golang-lab/clean-architecture/adapter/handler/middleware"
	"github.com/Pranc1ngPegasus/golang-lab/clean-architecture/adapter/logger"
	"github.com/Pranc1ngPegasus/golang-lab/clean-architecture/adapter/server"
	logger2 "github.com/Pranc1ngPegasus/golang-lab/clean-architecture/domain/logger"
	"net/http"
)

// Injectors from wire.go:

func initialize() (*app, error) {
	loggerLogger, err := logger.NewLogger()
	if err != nil {
		return nil, err
	}
	config, err := configuration.Get()
	if err != nil {
		return nil, err
	}
	configurationServer := config.Server
	v := middleware.NewLogging(loggerLogger)
	healthcheck := handler.NewHealthcheck()
	httpHandler := handler.NewHandler(v, healthcheck)
	httpServer := server.NewServer(configurationServer, httpHandler)
	mainApp := &app{
		logger: loggerLogger,
		server: httpServer,
	}
	return mainApp, nil
}

// wire.go:

type app struct {
	logger logger2.Logger
	server *http.Server
}
